import { LottieAnimationLoader, LottieConfigCreator } from '../..';
export class LottieAnimationComponent {
    constructor() {
        /**
         * start animation automatically
         */
        this.autoplay = false;
        /**
         * data JSON
         */
        this.dataJson = {};
        /**
         * loop animation
         */
        this.loop = false;
        /**
         * data JSON location
         */
        this.src = '';
    }
    onDataJsonChange(value) {
        this.updateDataJson(value);
    }
    onSrcChange(value) {
        this.updateSrc(value);
    }
    componentDidLoad() {
        this.lottieAnimationLoader = new LottieAnimationLoader();
        this.lottieConfigCreator = new LottieConfigCreator();
        this.updateDataJson(this.dataJson);
        this.updateSrc(this.src);
    }
    /**
     * plays the animation
     */
    play() {
        this.lottieAnimation.play();
    }
    /**
     * stops the animation
     */
    stop() {
        this.lottieAnimation.stop();
    }
    /**
     * sets the animation progress to a certain point (0..1)
     */
    progress(progress) {
        this.lottieAnimation.animationProgress = progress;
    }
    /**
     * sets the speed of the animation
     */
    setSpeed(speed) {
        this.lottieAnimation.setSpeed(speed);
    }
    /**
     * sets the direction of the animation
     */
    setDirection(direction) {
        this.lottieAnimation.setDirection(direction);
    }
    /**
     * plays the animation until a certain frame, or time
     */
    goToAndStop(value, isFrame = true) {
        this.lottieAnimation.goToAndStop(value, isFrame);
    }
    /**
     * gets the number of frames
     */
    async getTotalFrames() {
        return this.lottieAnimation.totalFrames;
    }
    updateSrc(src) {
        if (src) {
            this.lottieAnimation = this.lottieAnimationLoader.load(this.lottieConfigCreator.createWithSrc(this.animationContainerElement, src, this.autoplay, this.loop), (d) => this.emitOnAnimationLoadedEvent(d));
        }
    }
    updateDataJson(dataJson) {
        if (Object.keys(dataJson).length > 0) {
            this.lottieAnimation = this.lottieAnimationLoader.load(this.lottieConfigCreator.createWithData(this.animationContainerElement, dataJson, this.autoplay, this.loop), (d) => this.emitOnAnimationLoadedEvent(d));
        }
    }
    emitOnAnimationLoadedEvent(data) {
        this.onAnimationLoaded.emit(data);
    }
    render() {
        return (h("div", { class: "lottie-animation" },
            h("div", { class: "lottie-animation__container", ref: (el) => this.animationContainerElement = el })));
    }
    static get is() { return "lottie-animation"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "autoplay": {
            "type": Boolean,
            "attr": "autoplay"
        },
        "dataJson": {
            "type": "Any",
            "attr": "data-json",
            "watchCallbacks": ["onDataJsonChange"]
        },
        "getTotalFrames": {
            "method": true
        },
        "goToAndStop": {
            "method": true
        },
        "loop": {
            "type": Boolean,
            "attr": "loop"
        },
        "play": {
            "method": true
        },
        "progress": {
            "method": true
        },
        "setDirection": {
            "method": true
        },
        "setSpeed": {
            "method": true
        },
        "src": {
            "type": String,
            "attr": "src",
            "watchCallbacks": ["onSrcChange"]
        },
        "stop": {
            "method": true
        }
    }; }
    static get events() { return [{
            "name": "onAnimationLoaded",
            "method": "onAnimationLoaded",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get style() { return "/**style-placeholder:lottie-animation:**/"; }
}
