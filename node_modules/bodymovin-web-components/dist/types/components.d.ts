/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import './stencil.core';




export namespace Components {

  interface LottieAnimation {
    /**
    * start animation automatically
    */
    'autoplay': boolean;
    /**
    * data JSON
    */
    'dataJson': any;
    /**
    * gets the number of frames
    */
    'getTotalFrames': () => Promise<number>;
    /**
    * plays the animation until a certain frame, or time
    */
    'goToAndStop': (value: number, isFrame?: boolean) => void;
    /**
    * loop animation
    */
    'loop': boolean;
    /**
    * plays the animation
    */
    'play': () => void;
    /**
    * sets the animation progress to a certain point (0..1)
    */
    'progress': (progress: number) => void;
    /**
    * sets the direction of the animation
    */
    'setDirection': (direction: number) => void;
    /**
    * sets the speed of the animation
    */
    'setSpeed': (speed: number) => void;
    /**
    * data JSON location
    */
    'src': string;
    /**
    * stops the animation
    */
    'stop': () => void;
  }
  interface LottieAnimationAttributes extends StencilHTMLAttributes {
    /**
    * start animation automatically
    */
    'autoplay'?: boolean;
    /**
    * data JSON
    */
    'dataJson'?: any;
    /**
    * loop animation
    */
    'loop'?: boolean;
    /**
    * triggered when the animation is loaded (event.detail.animation contains the Lottie animation item).
    */
    'onOnAnimationLoaded'?: (event: CustomEvent) => void;
    /**
    * data JSON location
    */
    'src'?: string;
  }

  interface LottieScroll {
    /**
    * If `true` it's only playing the animation, while if it's `false` the animation follows the scroll progression.
    */
    'playthrough': boolean;
    /**
    * the speed of the animation
    */
    'speed': number;
    /**
    * data JSON location
    */
    'src': string;
  }
  interface LottieScrollAttributes extends StencilHTMLAttributes {
    /**
    * triggered when the scroll position enters the active area
    */
    'onOnAnimationStart'?: (event: CustomEvent<void>) => void;
    /**
    * triggered when the scroll position leaves the active area (in playthrough mode when the animation goes out at the bottom of the viewport).
    */
    'onOnAnimationStop'?: (event: CustomEvent<void>) => void;
    /**
    * If `true` it's only playing the animation, while if it's `false` the animation follows the scroll progression.
    */
    'playthrough'?: boolean;
    /**
    * the speed of the animation
    */
    'speed'?: number;
    /**
    * data JSON location
    */
    'src'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'LottieAnimation': Components.LottieAnimation;
    'LottieScroll': Components.LottieScroll;
  }

  interface StencilIntrinsicElements {
    'lottie-animation': Components.LottieAnimationAttributes;
    'lottie-scroll': Components.LottieScrollAttributes;
  }


  interface HTMLLottieAnimationElement extends Components.LottieAnimation, HTMLStencilElement {}
  var HTMLLottieAnimationElement: {
    prototype: HTMLLottieAnimationElement;
    new (): HTMLLottieAnimationElement;
  };

  interface HTMLLottieScrollElement extends Components.LottieScroll, HTMLStencilElement {}
  var HTMLLottieScrollElement: {
    prototype: HTMLLottieScrollElement;
    new (): HTMLLottieScrollElement;
  };

  interface HTMLElementTagNameMap {
    'lottie-animation': HTMLLottieAnimationElement
    'lottie-scroll': HTMLLottieScrollElement
  }

  interface ElementTagNameMap {
    'lottie-animation': HTMLLottieAnimationElement;
    'lottie-scroll': HTMLLottieScrollElement;
  }


}
